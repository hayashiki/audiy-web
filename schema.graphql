type Audio implements Node {
    id: ID!
    name: String!
    length: Int!
    likeCount: Int!
    playCount: Int!
    commentCount: Int!
    url: String!
    mimetype: String!
    played: Boolean!
    liked: Boolean!
    stared: Boolean!
    publishedAt: Time!
    createdAt: Time!
    updatedAt: Time!
}

type AudioConnection implements Connection {
    pageInfo: PageInfo!
    edges: [AudioEdge]!
}

type AudioEdge implements Edge {
    cursor: Cursor!
    node: Audio!
}

input AudioFilter {
    played: Boolean
    stared: Boolean
    liked: Boolean
}

enum AudioOrder {
    PUBLISHED_AT_ASC
    PUBLISHED_AT_DESC
}

input AudiosInput {
    id: ID!
    name: String!
}

type Comment implements Node {
    id: ID!
    user: User!
    body: String!
    audio: Audio!
    createdAt: Time!
    updatedAt: Time!
}

type CommentConnection implements Connection {
    pageInfo: PageInfo!
    edges: [CommentEdge]!
}

type CommentEdge implements Edge {
    cursor: Cursor!
    node: Comment!
}

input CommentOrder {
    field: CommentOrderField
    direction: SortDirection
}

enum CommentOrderField {
    ID
}

interface Connection {
    pageInfo: PageInfo!
    edges: [Edge]!
}

input CreateCommentInput {
    audioID: ID!
    body: String!
}

input CreateFeedInput {
    audioID: ID!
}

type CreatePlayPayload {
    result: Boolean!
    play: Play!
}

input CreateUserInput {
    id: ID!
    email: String!
    name: String!
}

scalar Cursor

type DeleteCommentResult {
    success: Boolean!
    id: ID!
}

type DeleteFeedResult {
    success: Boolean!
    id: ID!
}

input DeleteLikeInput {
    id: ID!
}

input DeleteStarInput {
    id: ID!
}

interface Edge {
    cursor: Cursor!
    node: Node!
}

type Feed implements Node {
    id: ID!
    audio: Audio!
    user: User!
    publishedAt: Time!
    played: Boolean!
    liked: Boolean!
    stared: Boolean!
    startTime: Float
    createdAt: Time!
    updatedAt: Time!
}

type FeedConnection implements Connection {
    pageInfo: PageInfo!
    edges: [FeedEdge]!
}

type FeedEdge implements Edge {
    cursor: Cursor!
    node: Feed!
}

enum FeedEvent {
    PLAYED
    UNPLAYED
    STARED
    UNSTARED
    LIKED
    UNLIKED
}

input FeedFilter {
    state: FeedEvent
}

type Like implements Node {
    id: ID!
    user: User!
    audio: Audio!
    createdAt: Time!
    updatedAt: Time!
}

type Mutation {
    createUser(input: CreateUserInput!): User
    createAudio(input: AudiosInput!): Audio
    createPlay(input: UpdateAudioInput!): Play
    createComment(input: CreateCommentInput!): Comment!
    updateComment(input: UpdateCommentInput!): Comment!
    deleteComment(id: ID!): DeleteCommentResult!
    createFeed(input: CreateFeedInput!): Feed!
    updateFeed(input: UpdateFeedInput!): Feed!
    deleteFeed(id: ID!): DeleteFeedResult!
    createLike(input: UpdateAudioInput!): Like
    deleteLike(input: UpdateAudioInput!): Like
    createStar(input: UpdateAudioInput!): Star
    deleteStar(input: UpdateAudioInput!): Star
}

interface Node {
    id: ID!
}

type PageInfo {
    cursor: String!
    totalPage: Int!
    hasMore: Boolean!
}

type Play implements Node {
    id: ID!
    user: User!
    audio: Audio!
    createdAt: Time!
    updatedAt: Time!
}

type Query {
    version: Version!
    comments(
        audioID: ID!
        cursor: Cursor
        limit: Int
        order: [String!]
    ): CommentConnection!
    audio(id: ID!): Audio
    audios(
        cursor: Cursor
        filter: AudioFilter
        limit: Int = 10
        order: AudioOrder = PUBLISHED_AT_DESC
    ): AudioConnection!
    feeds(
        cursor: Cursor
        filter: FeedEvent
        limit: Int = 20
        order: AudioOrder = PUBLISHED_AT_DESC
    ): FeedConnection!
}

input QuerySpec {
    order: [AudioOrder!]
    cursor: Cursor!
    limit: Int = 100
}

enum SortDirection {
    ASC
    DESC
}

type Star implements Node {
    id: ID!
    user: User!
    audio: Audio!
    createdAt: Time!
    updatedAt: Time!
}

enum State {
    Played
    Unplayed
}

scalar Time

input UpdateAudioInput {
    audioID: ID!
}

input UpdateCommentInput {
    id: ID!
}

input UpdateFeedInput {
    id: ID!
    event: FeedEvent!
}

type User implements Node {
    id: ID!
    email: String!
    name: String!
    photoURL: String!
}

type Version {
    hash: String!
    version: String!
}

