type Audio implements Node {
  id: ID!
  name: String!
  length: Int!
  likeCount: Int!
  playCount: Int!
  url: String!
  minetype: String!
  publishedAt: Time!
  createdAt: Time!
  updatedAt: Time!
}

type AudioConnection implements Connection {
  pageInfo: PageInfo!
  edges: [AudioEdge]!
}

type AudioEdge implements Edge {
  cursor: Cursor!
  node: Audio!
}

input AudioOrder {
  field: AudioOrderField
  direction: SortDirection
}

enum AudioOrderField {
  ID
  NAME
  PUBLISHED_AT
  CREATED_AT
  UPDATED_AT
}

input AudiosInput {
  id: ID!
  name: String!
}

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge]!
}

scalar Cursor

interface Edge {
  cursor: Cursor!
  node: Node!
}

type Mutation {
  createAudio(input: AudiosInput!): Audio
}

interface Node {
  id: ID!
}

type PageInfo {
  cursor: String!
  totalPage: Int!
  hasMore: Boolean!
}

type Query {
  audio(id: ID!): Audio
  audios(cursor: Cursor, limit: Int, order: [String!]): AudioConnection!
  version: Version!
}

input QuerySpec {
  order: [AudioOrder!] = [{ field: ID, direction: ASC }
]
  cursor: Cursor!
  limit: Int = 100
}

enum SortDirection {
  ASC
  DESC
}

scalar Time

type Version {
  hash: String!
  version: String!
}

